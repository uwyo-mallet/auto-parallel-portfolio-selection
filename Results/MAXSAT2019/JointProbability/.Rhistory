#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
csvs = list.files(".",".csv")
csvs
csvs == paste(sbs_par10$InstanceName ,".csv",sep="")
csvs
sbs_par10$InstanceName
csvs == paste("sat/",sbs_par10$InstanceName ,".csv",sep="")
csvs
sbs_par10$InstanceName == vbs_par10$InstanceName
sbs_par10
paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")
print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime == self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime == self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
View(df)
View(sbs_par10)
View(runtimes)
setwd("~/Documents/OrganizedScripts/results/SAT2016/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("SAT2016")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT16-MAIN"))
}
setwd("..")
}
setwd("~/Documents/OrganizedScripts/results/MAXSAT2019/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("MAXSAT2019")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
print(sum(paste(csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
runtime = min(df$ParallelRuntime)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "MAXSAT19-UCMS"))
}
setwd("..")
}
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
function (x, df1, df2, ncp, log = FALSE)
getwd()
vals = seq(0,1,by=0.001)
taus = vals
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime == self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
colnames(runtimes) <- c("InstanceName","Runtime","Tau", "Scenarios")
write.csv(runtimes,"NormalizedGap_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/SAT2016/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("SAT2016")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
source("~/Documents/OrganizedScripts/OverheadResults.R")
# library(emojifont)
library(reshape2)
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime == self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
colnames(runtimes) <- c("InstanceName","Runtime","Tau", "Scenarios")
write.csv(runtimes,"NormalizedGap_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/SAT2016/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("SAT2016")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT16-MAIN"))
}
setwd("..")
}
write.csv(runtimes,"NormalizedGap_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/MAXSAT2019/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("MAXSAT2019")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste(csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
runtime = (sbs-runtime)/(sbs-vbs)
runtime = min(df$ParallelRuntime)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "MAXSAT19-UCMS"))
}
setwd("..")
}
write.csv(df,"NormalizedGap_Tau_Sensitivity_10cores.csv",row.names = FALSE)
write.csv(runtimes,"NormalizedGap_Tau_Sensitivity_10cores.csv",row.names = FALSE)
View(runtimes)
runtimes[which(runtimes$Scenarios == "Scenatio"),]
runtimes[which(runtimes$Scenarios == "SAT2018"),]
runtimes[which(runtimes$Scenarios == "SAT2018"),]
runtimes
runtimes[which(runtimes$Scenarios == "SAT18-EXP"),]
runtimes[which(runtimes$Scenarios == "SAT18-EXP" & runtimes$Tau == 0.813),]
a = runtimes[which(runtimes$Scenarios == "SAT18-EXP" & runtimes$Tau == 0.813),]
a$Runtime
a = a$Runtime
a[which(a == "NAN")]
a[a == "NAN"]
a == "NAN"
a[whicha == "NAN"
))
a[which(is.nan(a))]
a[which(a == "NaN")]
a[which(a == "NaN")] <- 0
a[which(a == "NaN")]
a
a[which(a == "-Inf")]
a[which(a == "-Inf")] <- 0
a
mean(a)
a[which(a == "NA")] <- 0
mean(a)
a[which(a == NA)] <- 0
mean(a)
a
mean(as.numeric(a))
mean(as.numeric(a))
a<0
a[which(a<0)]
a[which(a<0)] <- 0
a
mean(a)
mean(as.numeric(a))
a = runtimes[which(runtimes$Scenarios == "SAT18-EXP" & runtimes$Tau == 0.813),]
a
a$Runtime
as.numeric(a$Runtime)
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime == self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
# runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
colnames(runtimes) <- c("InstanceName","Runtime","Tau", "Scenarios")
write.csv(runtimes,"Par10_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/SAT2016/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("SAT2016")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
# runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT16-MAIN"))
}
setwd("..")
}
write.csv(runtimes,"Par10_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/MAXSAT2019/JointProbability/")
getwd()
vals = seq(0,1,by=0.1)
taus = vals
self = SequentialPerformance$new("MAXSAT2019")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste(csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
# runtime = (sbs-runtime)/(sbs-vbs)
runtime = min(df$ParallelRuntime)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "MAXSAT19-UCMS"))
}
setwd("..")
}
write.csv(runtimes,"Par10_Tau_Sensitivity_10cores.csv",row.names = FALSE)
getwd()
runtimes$Runtime = as.numeric(runtimes$Runtime)
runtimes$Tau = as.numeric(runtimes$Tau)
sat18 = runtimes[which(runtimes$Scenarios == "SAT18-EXP"),]
sat18
sat16 = runtimes[which(runtimes$Scenarios == "SAT16-MAIN"),]
maxsat19 = runtimes[which(runtimes$Scenarios == "MAXSAT19-UCMS"),]
sat18$Runtime = as.numeric(sat18$Runtime)
sat18$Tau = as.numeric(sat18$Tau)
sat16$Runtime = as.numeric(sat16$Runtime)
sat16$Tau = as.numeric(sat16$Tau)
maxsat19$Runtime = as.numeric(maxsat19$Runtime)
maxsat19$Tau = as.numeric(maxsat19$Tau)
self = SequentialPerformance$new("SAT2018")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
sat18 = sat18[which(sat18$Tau == 0.813),]
sat18
mean(sat18$Runtime)
mean(sbs_par10)
sbs_par10
mean(sbs_par10$MapleLCMDistChronoBT)
(mean(sbs_par10$MapleLCMDistChronoBT) - mean(sat18$Runtime))/(mean(sbs_par10$MapleLCMDistChronoBT)-mean(vbs_par10$VBS_Runtime))
sat18
df_results = data_frame(matrix(nrow=0,ncol=4))
vals
taus
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
runtimes= read.csv("Par10_Tau_Sensitivity_10cores.csv")
setwd("~/Documents/OrganizedScripts/results/SAT2016/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
vals
taus = vals
self = SequentialPerformance$new("SAT2016")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste("sat/",csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
# runtime = (sbs-runtime)/(sbs-vbs)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT16-MAIN"))
}
setwd("..")
}
write.csv(runtimes,"Par10_Tau_Sensitivity_10cores.csv",row.names = FALSE)
setwd("~/Documents/OrganizedScripts/results/MAXSAT2019/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
self = SequentialPerformance$new("MAXSAT2019")
vbs_par10 = self$get_VBS_par10()
vbs_par10 = vbs_par10[order(vbs_par10$InstanceName),]
sbs_par10 = self$get_par10_dataframe()[c("InstanceName",self$get_SBS())]
sbs_par10 = sbs_par10[order(sbs_par10$InstanceName),]
sbs_par10$InstanceName == vbs_par10$InstanceName
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
# print(sum(paste(csvs,sep="") == paste(sbs_par10$InstanceName ,".csv",sep="")))
for(csv in csvs){
df = read.csv(csv)
vbs = vbs_par10[which(vbs_par10$InstanceName == df$InstanceName[1]),]$VBS_Runtime
sbs = sbs_par10[which(sbs_par10$InstanceName == df$InstanceName[1]),][2][[1]]
runtime = min(df$ParallelRuntime)
if(runtime >= self$Cutoff){
runtime = runtime*10
}
#sbs-value/sbs-vbs
# runtime = (sbs-runtime)/(sbs-vbs)
runtime = min(df$ParallelRuntime)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "MAXSAT19-UCMS"))
}
setwd("..")
}
write.csv(runtimes,"Par10_Tau_Sensitivity_10cores.csv",row.names = FALSE)
