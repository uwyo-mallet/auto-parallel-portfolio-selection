readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep="")))
readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep="")))
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
log
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
output
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
completed
timeout = sum(str_detect(output,"TIME"))>0
timeout
timeout = (length(log) + length(output))==0
timeout
length(log)
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
exit = sum(str_detect(output," exit "))>0
exit
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
stat
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-26-2023/")
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
for(row in c(1:nrow(df))){
if(!df[row,]$stat %in% c("COMPLETED")){
if(file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))){
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
}
}
}
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
View(df)
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-16-2023/")
logs = list.files(".", "*.log$")
outputs = list.files(".","*.output$")
outs = list.files(".","*.out$")
errors = list.files(".","*.error$")
submits = list.files(".","submit")
all = list.files(".")
length(all) ==length(logs)+length(outputs)+length(outs)+length(errors)+length(submits)
instances = read.csv("~/Documents/Parallel_Experiments/IPC2018/gscratch_IPC2018.txt", sep=" ",header = FALSE)[1]$V1
solvers = c("blind","Complementary1","Complementary2","DecStar","Delfi1","Delfi2","FDMS1","FDMS2","Metis1","Metis2","Planning-PDBs","Scorpion","symbolic-bidirectional","Symple-1","Symple-2")
TO_core = readLines("../TO_1core.txt")
library(stringr)
df = data.frame(matrix(nrow=0,ncol=4))
for(ins in instances){
# print(ins)
log = logs[which(str_detect(logs,paste(ins,".log",sep="")))]
output = outputs[which(str_detect(outputs,paste(ins,".output",sep="")))]
for(sol in solvers){
solLog = log[which(str_starts(log,sol))]
solout = output[which(str_starts(output,sol))]
if(length(solLog)>0){
log_inside = readLines(solLog)
out_inside = readLines(solout)
completed = (sum(str_detect(out_inside,"Solution found")) + sum(str_detect(out_inside,"Done running the selected planner")))>0
timeout = sum(str_detect(out_inside,"TIME"))>0
timeout = (length(log_inside) + length(out_inside))==0
error = sum(str_detect(out_inside,"ERROR"))>0
exit = sum(str_detect(out_inside," exit "))>0
memout = sum(str_detect(out_inside,"Failed to allocate memory"))>0
if(length(log_inside)>0){
time = strsplit(log_inside[which(str_detect(log_inside,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df = rbind(df,c(ins,sol,time,stat))
} else {
df = rbind(df,c(ins,sol,NA,"NOTEXIST"))
}
}
}
colnames(df) <- c("ins","sol","time","stat")
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-26-2023/")
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
for(row in c(1:nrow(df))){
if(!df[row,]$stat %in% c("COMPLETED")){
if(file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))){
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
df[row,]$time = time
}
}
}
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
log
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
output
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
completed
timeout = sum(str_detect(output,"TIME"))>0
timeout
timeout = (length(log) + length(output))==0
timeout
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
memout
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
time
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
stat
df[row,]$stat = stat
df[row,]$time = time
df[row,]
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-16-2023/")
logs = list.files(".", "*.log$")
outputs = list.files(".","*.output$")
outs = list.files(".","*.out$")
errors = list.files(".","*.error$")
submits = list.files(".","submit")
all = list.files(".")
length(all) ==length(logs)+length(outputs)+length(outs)+length(errors)+length(submits)
instances = read.csv("~/Documents/Parallel_Experiments/IPC2018/gscratch_IPC2018.txt", sep=" ",header = FALSE)[1]$V1
solvers = c("blind","Complementary1","Complementary2","DecStar","Delfi1","Delfi2","FDMS1","FDMS2","Metis1","Metis2","Planning-PDBs","Scorpion","symbolic-bidirectional","Symple-1","Symple-2")
TO_core = readLines("../TO_1core.txt")
library(stringr)
df = data.frame(matrix(nrow=0,ncol=4))
for(ins in instances){
# print(ins)
log = logs[which(str_detect(logs,paste(ins,".log",sep="")))]
output = outputs[which(str_detect(outputs,paste(ins,".output",sep="")))]
for(sol in solvers){
solLog = log[which(str_starts(log,sol))]
solout = output[which(str_starts(output,sol))]
if(length(solLog)>0){
log_inside = readLines(solLog)
out_inside = readLines(solout)
completed = (sum(str_detect(out_inside,"Solution found")) + sum(str_detect(out_inside,"Done running the selected planner")))>0
timeout = sum(str_detect(out_inside,"TIME"))>0
timeout = (length(log_inside) + length(out_inside))==0
error = sum(str_detect(out_inside,"ERROR"))>0
exit = sum(str_detect(out_inside," exit "))>0
memout = sum(str_detect(out_inside,"Failed to allocate memory"))>0
if(length(log_inside)>0){
time = strsplit(log_inside[which(str_detect(log_inside,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df = rbind(df,c(ins,sol,time,stat))
} else {
df = rbind(df,c(ins,sol,NA,"NOTEXIST"))
}
}
}
colnames(df) <- c("ins","sol","time","stat")
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-26-2023/")
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
for(row in c(1:nrow(df))){
if(!df[row,]$stat %in% c("COMPLETED")){
if(file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))){
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
df[row,]$time = time
}
}
}
output
row
df[row,]
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-16-2023/")
logs = list.files(".", "*.log$")
outputs = list.files(".","*.output$")
outs = list.files(".","*.out$")
errors = list.files(".","*.error$")
submits = list.files(".","submit")
all = list.files(".")
length(all) ==length(logs)+length(outputs)+length(outs)+length(errors)+length(submits)
instances = read.csv("~/Documents/Parallel_Experiments/IPC2018/gscratch_IPC2018.txt", sep=" ",header = FALSE)[1]$V1
solvers = c("blind","Complementary1","Complementary2","DecStar","Delfi1","Delfi2","FDMS1","FDMS2","Metis1","Metis2","Planning-PDBs","Scorpion","symbolic-bidirectional","Symple-1","Symple-2")
TO_core = readLines("../TO_1core.txt")
library(stringr)
df = data.frame(matrix(nrow=0,ncol=4))
for(ins in instances){
# print(ins)
log = logs[which(str_detect(logs,paste(ins,".log",sep="")))]
output = outputs[which(str_detect(outputs,paste(ins,".output",sep="")))]
for(sol in solvers){
solLog = log[which(str_starts(log,sol))]
solout = output[which(str_starts(output,sol))]
if(length(solLog)>0){
log_inside = readLines(solLog)
out_inside = readLines(solout)
completed = (sum(str_detect(out_inside,"Solution found")) + sum(str_detect(out_inside,"Done running the selected planner")))>0
timeout = sum(str_detect(out_inside,"TIME"))>0
timeout = (length(log_inside) + length(out_inside))==0
error = sum(str_detect(out_inside,"ERROR"))>0
exit = sum(str_detect(out_inside," exit "))>0
memout = sum(str_detect(out_inside,"Failed to allocate memory"))>0
if(length(log_inside)>0){
time = strsplit(log_inside[which(str_detect(log_inside,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df = rbind(df,c(ins,sol,time,stat))
} else {
df = rbind(df,c(ins,sol,NA,"NOTEXIST"))
}
}
}
colnames(df) <- c("ins","sol","time","stat")
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-26-2023/")
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
for(row in c(1:nrow(df))){
if(!df[row,]$stat %in% c("COMPLETED")){
print(row)
if(file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))){
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
df[row,]$time = time
}
}
}
row = 3597
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
log
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
output
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
completed
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
df[row,]$time = time
df[row,]
df[which(df$ins ==
"organic-synthesis_p18.pddl").]
df[which(df$ins ==
"organic-synthesis_p18.pddl"),]
row = 1770
df[row,]$sol, "__", df[row,]$ins
(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep="")
paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep="")
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
setwd("~/Documents/Parallel_Experiments/IPC2018/resultCSVs_IPC2018_Teton/teton-15-solvers-in-parallel-teton-1-solvers-IPC2018-April-26-2023/")
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
for(row in c(1:nrow(df))){
if(!df[row,]$stat %in% c("COMPLETED")){
if(file.exists(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))){
log = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".log", sep=""))
output = readLines(paste(df[row,]$sol, "__", df[row,]$ins, "/", df[row,]$sol, "__", df[row,]$ins, ".output", sep=""))
completed = (sum(str_detect(output,"Solution found")) + sum(str_detect(output,"Done running the selected planner")))>0
timeout = sum(str_detect(output,"TIME"))>0
timeout = (length(log) + length(output))==0
error = sum(str_detect(output,"ERROR"))>0
exit = sum(str_detect(output," exit "))>0
memout = sum(str_detect(output,"Failed to allocate memory"))>0
if(length(log)>0){
time = strsplit(log[which(str_detect(log,"user"))],"user")[[1]][1]
} else{ time = NA}
if(completed){
stat = "COMPLETED"
} else if(timeout){
stat = "TIMEOUT"
} else if(exit){
stat = "EXIT"
} else if(error){
stat = "ERROR"
} else if(memout){
stat = "MEMOUT"
} else{
stat = "UNKNOWN"
}
df[row,]$stat = stat
df[row,]$time = time
}
}
}
View(df)
comp = nrow(df[which(df$stat == "COMPLETED"),])
to =  nrow(df[which(df$stat == "TIMEOUT"),])
df[which(df$stat == "EXIT")]
df[which(df$stat == "EXIT",)]
nrow(df[which(df$stat == "EXIT",)])
nrow(df[which(df$stat == "EXIT"),])
nrow(df[which(!df$stat %in% c("COMPLETED","TIMEOUT")),])
nrow(df[which(!df$stat %in% c("COMPLETED","TIMEOUT")),])
setwd("~/Documents/OrganizedScripts/results/SAT2018/selections_different_theta_10cores/")
setwd("/home/haniye//Documents/OrganizedScripts/results/SAT2018/selections_different_theta_10cores/")
setwd("/home/haniye/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
vals
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
for(val in taus){
setwd(paste("tau_",val,"",sep=""))
csvs = list.files(".",".csv")
for(csv in csvs){
df = read.csv(csv)
runtime = min(df$ParallelRuntime)
instance = df$InstanceName[1]
runtimes = rbind(runtimes,c(instance, runtime, val, "SAT18-EXP"))
}
setwd("..")
}
setwd("~/Documents/OrganizedScripts/results/SAT2018/JointProbability/")
getwd()
vals = seq(0,1,by=0.001)
taus = vals
runtimes = data.frame(matrix(nrow = 0, ncol =4))
val = taus[1]
val
setwd(paste("tau_",val,"",sep=""))
paste("tau_",val,"",sep="")
csvs = list.files(".",".csv")
csvs
csv
df = read.csv(csv)
df
runtime = min(df$ParallelRuntime)
runtime
source("~/Documents/OrganizedScripts/OverheadResults.R")
source("~/Documents/OrganizedScripts/OverheadResults.R")
library(emojifont)
library(reshape2)
source("~/Documents/OrganizedScripts/OverheadResults.R")
