theta_results = theta_results[which(theta_results$median == FALSE),]
theta_results = theta_results[c(1:10,20,30,32),]
df["Algorithm Selection + Uncertainty"] = as.numeric(theta_results$Parallel_time)
sbs_p = df$`Single Best Solver`[1]
vbs_p = df$`Virtual Best Solver`[1]
as_p = df$`Top Algorithm Selection`[1]
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO.csv")
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO2.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO_old.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO3.csv"))
theta = theta[which(theta$metric=="Runtime"),]
theta = theta[which(theta$median==FALSE),]
theta = theta[which(theta$orderBy=="pred-se"),]
theta = theta[which(theta$Parallel_time == min(theta$Parallel_time)),]
app_p = c(theta$X.selected_solvers, theta$Parallel_time)
df = df[which(df$Cores %in% c(1:10)),]
df = melt(df, 1)
df = rbind(df,c(theta$X.selected_solvers,"Algorithm Selection + Uncertainty",theta$Parallel_time))
df
df$Cores = as.vector(df$Cores)
df$value = as.numeric(df$value)
df$approach
colnames(df) = c("cores", "approach", "runtime")
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
df$Cores = as.numeric(df$Cores)
df$Cores = as.numeric(df$Cores)
df
df$cores = as.numeric(df$)
df$cores = as.numeric(df$cores)
df$value = as.numeric(df$value)
df$approach
colnames(df) = c("cores", "approach", "runtime")
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
df
geom_point(aes(x = cores[41], y = runtime[41]),size = 6)
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")+
geom_point(aes(x = cores[41], y = runtime[41]),size = 6)
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
geom_point(aes(x = cores[41], y = runtime[41],size = 6))
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")+
geom_point(aes(x = cores[41], y = runtime[41],size = 6))
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")+
geom_point(aes(x = cores[41], y = runtime[41],size = "a"))
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")+
geom_point(aes(x = cores[41], y = runtime[41],size = "a",),size = 6)
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
if(Sys.info()['sysname']=="Linux"){
if(file.exists("~/Documents/OrganizedScripts/OverheadResults.R")){
source("~/Documents/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="~/Documents/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "~/Documents/OrganizedScripts/SAT2018/preds/"
selectionPath = "~/Documents/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "~/Documents/OrganizedScripts/SAT2018/final/"
modelPath = "~/Documents/mlr-scripts/SAT2018/Prediction/standardError/"
CVsetsPath = "~/Documents/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "~/Documents/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "~/Documents/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
} else{
source("/gscratch/hkashgar/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="/gscratch/hkashgar/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds/"
selectionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/final/"
modelPath = "/gscratch/hkashgar/mlr-scripts/SAT2018/Prediction/standardError/"
CVsetsPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "/gscratch/hkashgar/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
}
} else{
source("C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/preds/"
selectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/final/"
#modelPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/Prediction/SAT2018/StandardError/"
CVsetsPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
}
setwd("Documents/OrganizedScripts/results/SAT2018/")
if(Sys.info()['sysname']=="Linux"){
if(file.exists("~/Documents/OrganizedScripts/OverheadResults.R")){
source("~/Documents/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="~/Documents/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "~/Documents/OrganizedScripts/SAT2018/preds/"
selectionPath = "~/Documents/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "~/Documents/OrganizedScripts/SAT2018/final/"
modelPath = "~/Documents/mlr-scripts/SAT2018/Prediction/standardError/"
CVsetsPath = "~/Documents/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "~/Documents/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "~/Documents/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "~/Documents/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
} else{
source("/gscratch/hkashgar/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="/gscratch/hkashgar/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds/"
selectionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/final/"
modelPath = "/gscratch/hkashgar/mlr-scripts/SAT2018/Prediction/standardError/"
CVsetsPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "/gscratch/hkashgar/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "/gscratch/hkashgar/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "/gscratch/hkashgar/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
}
} else{
source("C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/actual_overhead_per_core_perc/"
#predictionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/preds/"
selectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/selection/"
finalSelectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/final/"
#modelPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/Prediction/SAT2018/StandardError/"
CVsetsPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/model_cv_all_sets/"
mcp_results_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2018/"
train_randomForest_validation_setPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/SAT2018/Prediction/standardError_validation/"
#preds_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/"
#preds_path_valid = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/"
selection_valid_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selection/"
selection_valid_exptected_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/selectionExpected/"
expected_pred_path =  "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2018/actual_overhead_per_solver_perc"
}
setwd("~/Documents/OrganizedScripts/results/SAT2018/")
library(reshape2)
top_vbs = read.csv("top_vbs.csv")
top_vbs<- melt(top_vbs) # Using gene as id variables
# rename the columns
colnames(top_vbs) <- c("InstanceName", "Cores", "Runtime")
top_vbs$Cores = as.numeric(sub(x= top_vbs$Cores, pattern = "cores_",replacement = ""))
plot(x = top_vbs$Cores, y = top_vbs$Runtime)
top_vbs = read.csv("top_vbs.csv")
top_vbs[2:38] = apply(top_vbs[2:38],2,as.numeric)
sd = apply(top_vbs[2:38],2,sd)
mean = apply(top_vbs[2:38],2,mean)
median = apply(top_vbs[2:38],2,median)
sum_top_vbs = data.frame(mean = mean, median = median, sd = sd)
sum_top_vbs$cores = c(1:37)
sum_top_vbs = sum_top_vbs[which(!(sum_top_vbs$cores%in% c(11:19,21:29,31, 33:38))),]
p<-ggplot(sum_top_vbs, aes(x=cores, y=mean,colour="Mean VBS Runtime")) +
geom_point()+
geom_point(aes(y=median,colour="Median VBS Runtime"))+
geom_errorbar(aes(ymin=mean-sd,
ymax=mean+sd), width=.2,
position=position_dodge(0.05))+
scale_y_continuous(
name = "Runtime"
#sec.axis = sec_axis( trans=~./self$Cutoff , name="probability of solving instance RegRF prediction")
)
p
top_sbs = read.csv("top_sbs.csv")
top_sbs[2:38] = apply(top_sbs[2:38],2,as.numeric)
sd = apply(top_sbs[2:38],2,sd)
mean = apply(top_sbs[2:38],2,mean)
median = apply(top_sbs[2:38],2,median)
sum_top_sbs = data.frame(mean = mean, median = median, sd = sd)
sum_top_sbs$cores = c(1:37)
sum_top_sbs = sum_top_sbs[which(!(sum_top_sbs$cores%in% c(11:19,21:29,31, 33:38))),]
p<-ggplot(sum_top_sbs, aes(x=cores, y=mean,colour="Mean SBS Runtime")) +
geom_point()+
geom_point(aes(y=median,colour="Median SBS Runtime"))+
geom_errorbar(aes(ymin=mean-sd,
ymax=mean+sd), width=.2,
position=position_dodge(0.05))+
scale_y_continuous(
name = "Runtime"
#sec.axis = sec_axis( trans=~./self$Cutoff , name="probability of solving instance RegRF prediction")
)
p
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
top_as = top_as[which(!(top_as$X.selected_solvers%in% c(11:19,21:29,31, 33:38))),]
df["Top Algorithm Selection"] = as.numeric(top_as$Parallel_time)
theta_results = read.arff("top_Uncertainty_Theta_0.1139342_limitingSolvers.arff")
theta_results = theta_results[which(theta_results$metric == "Runtime"),]
theta_results = theta_results[which(theta_results$orderBy == "pred-se"),]
theta_results = theta_results[which(theta_results$median == FALSE),]
theta_results = theta_results[c(1:10,20,30,32),]
df["Algorithm Selection + Uncertainty"] = as.numeric(theta_results$Parallel_time)
sbs_p = df$`Single Best Solver`[1]
vbs_p = df$`Virtual Best Solver`[1]
as_p = df$`Top Algorithm Selection`[1]
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO.csv")
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO2.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO_old.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO3.csv"))
theta = theta[which(theta$metric=="Runtime"),]
theta = theta[which(theta$median==FALSE),]
theta = theta[which(theta$orderBy=="pred-se"),]
theta = theta[which(theta$Parallel_time == min(theta$Parallel_time)),]
app_p = c(theta$X.selected_solvers, theta$Parallel_time)
df = df[which(df$Cores %in% c(1:10)),]
df = melt(df, 1)
df = rbind(df,c(theta$X.selected_solvers,"Algorithm Selection + Uncertainty",theta$Parallel_time))
df$cores = as.numeric(df$cores)
df$value = as.numeric(df$value)
df$approach
colnames(df) = c("cores", "approach", "runtime")
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
df$cores = as.numeric(df$cores)
colnames(df) = c("cores", "approach", "runtime")
df$cores = as.numeric(df$cores)
df$runtime = as.numeric(df$runtime)
df$approach
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
top_as = top_as[which(!(top_as$X.selected_solvers%in% c(11:19,21:29,31, 33:38))),]
df["Top Algorithm Selection (no uncertainty)"] = as.numeric(top_as$Parallel_time)
theta_results = read.arff("top_Uncertainty_Theta_0.1139342_limitingSolvers.arff")
theta_results = theta_results[which(theta_results$metric == "Runtime"),]
theta_results = theta_results[which(theta_results$orderBy == "pred-se"),]
theta_results = theta_results[which(theta_results$median == FALSE),]
theta_results = theta_results[c(1:10,20,30,32),]
df["Algorithm Selection + Uncertainty"] = as.numeric(theta_results$Parallel_time)
sbs_p = df$`Single Best Solver`[1]
vbs_p = df$`Virtual Best Solver`[1]
as_p = df$`Top Algorithm Selection`[1]
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO.csv")
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO2.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO_old.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO3.csv"))
theta = theta[which(theta$metric=="Runtime"),]
theta = theta[which(theta$median==FALSE),]
theta = theta[which(theta$orderBy=="pred-se"),]
theta = theta[which(theta$Parallel_time == min(theta$Parallel_time)),]
app_p = c(theta$X.selected_solvers, theta$Parallel_time)
df = df[which(df$Cores %in% c(1:10)),]
df = melt(df, 1)
df = rbind(df,c(theta$X.selected_solvers,"Algorithm Selection + Uncertainty",theta$Parallel_time))
colnames(df) = c("cores", "approach", "runtime")
df$cores = as.numeric(df$cores)
df$runtime = as.numeric(df$runtime)
df$approach
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
ggplot(df, aes(x = cores, y = runtime, color = approach)) +
geom_line() +
geom_point(aes(x = 1, y = app_p, colour="Not Limiting cores", size = 5))
ggplot(df, aes(x=cores, y=runtime, colour = approach, group = approach, shape = approach)) +
geom_point(size = 3)+
geom_line(aes(linetype=approach), size = 1)+
labs(x = "Number of Cores", y = "Runtime (s)")
df %>% ggplot(aes(x=theta)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8, )
randomSearchResult = read.csv("~/Documents/OrganizedScripts/results/SAT2018/RandomSearch_sat2018_combined_allEqual_NOTignoreTO_old.csv")
thetas = values
library(ggplot2)
plot(density(thetas))
df = data.frame(theta = thetas)
df %>% ggplot(aes(x=theta)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8, )
if(Sys.info()['sysname']=="Linux"){
source("~/Documents/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="~/Documents/OrganizedScripts/SAT2016/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "~/Documents/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "~/Documents/OrganizedScripts/SAT2016/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "~/Documents/OrganizedScripts/SAT2016/actual_overhead_per_core_perc/"
#predictionPath = "~/Documents/OrganizedScripts/SAT2016/preds/"
selectionPath = "~/Documents/OrganizedScripts/SAT2016/selection/"
finalSelectionPath = "~/Documents/OrganizedScripts/SAT2016/final/"
#modelPath = "~/Documents/mlr-scripts/SAT2016/Prediction/StandardError/"
CVsetsPath = "~/Documents/OrganizedScripts/SAT2016/model_cv_all_sets/"
mcp_results_path = "~/Documents/OrganizedScripts/SAT2016/"
train_randomForest_validation_setPath = "~/Documents/mlr-scripts/SAT2016/Prediction/standardError_validation/"
#preds_path = "~/Documents/OrganizedScripts/SAT2016/preds_valid/"
#preds_path_valid = "~/Documents/OrganizedScripts/SAT2016/preds_valid/validation/"
selection_valid_path = "~/Documents/OrganizedScripts/SAT2016/preds_valid/validation/selection/"
selection_valid_exptected_path = "~/Documents/OrganizedScripts/SAT2016/preds_valid/validation/selectionExpected/"
expected_pred_path =  "~/Documents/OrganizedScripts/SAT2016/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "~/Documents/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc"
} else{
source("C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/OverheadResults.R")
Estimate_overhead_on_predictionPath ="C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/Estimate_overhead_on_prediction/"
actual_overhead_per_solverPlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc/plot/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc/"
actual_overhead_per_corePlotPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/actual_overhead_per_core_perc/plot/"
actual_overhead_per_corePath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/actual_overhead_per_core_perc/"
#predictionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/preds/"
selectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/selection/"
finalSelectionPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/final/"
#modelPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/Prediction/SAT2016/StandardError/"
CVsetsPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/model_cv_all_sets/"
mcp_results_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/OrganizedScripts/SAT2016/"
train_randomForest_validation_setPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/mlr-scripts/SAT2016/Prediction/standardError_validation/"
#preds_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/preds_valid/"
#preds_path_valid = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/preds_valid/validation/"
selection_valid_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/preds_valid/validation/selection/"
selection_valid_exptected_path = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/preds_valid/validation/selectionExpected/"
expected_pred_path =  "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/preds_valid/validation/expectedValues/"
actual_overhead_per_solverPath = "C:/Users/hnyk9/OneDrive - University of Wyoming/Documents/OrganizedScripts/SAT2016/actual_overhead_per_solver_perc"
}
#considering SE, all theta equal
#got the theta by random search 2^(rnom(100))
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO_300.csv")
theta
setwd("~/Documents/OrganizedScripts/results/SAT2016/")
library(reshape2)
top_vbs = read.csv("top_vbs.csv")
top_vbs
top_vbs<- melt(top_vbs) # Using gene as id variables
top_vbs
# rename the columns
colnames(top_vbs) <- c("InstanceName", "Cores", "Runtime")
top_vbs$Cores = as.numeric(sub(x= top_vbs$Cores, pattern = "cores_",replacement = ""))
plot(x = top_vbs$Cores, y = top_vbs$Runtime)
top_vbs = read.csv("top_vbs.csv")
top_vbs[2:38] = apply(top_vbs[2:38],2,as.numeric)
sd = apply(top_vbs[2:38],2,sd)
mean = apply(top_vbs[2:38],2,mean)
median = apply(top_vbs[2:38],2,median)
sum_top_vbs = data.frame(mean = mean, median = median, sd = sd)
sum_top_vbs$cores = c(1:37)
sum_top_vbs = sum_top_vbs[which(!(sum_top_vbs$cores%in% c(11:19,21:29,31, 33:38))),]
p<-ggplot(sum_top_vbs, aes(x=cores, y=mean,colour="Mean VBS Runtime")) +
geom_point()+
geom_point(aes(y=median,colour="Median VBS Runtime"))+
geom_errorbar(aes(ymin=mean-sd,
ymax=mean+sd), width=.2,
position=position_dodge(0.05))+
scale_y_continuous(
name = "Runtime"
#sec.axis = sec_axis( trans=~./self$Cutoff , name="probability of solving instance RegRF prediction")
)
p
top_sbs = read.csv("top_sbs.csv")
top_sbs[2:38] = apply(top_sbs[2:38],2,as.numeric)
sd = apply(top_sbs[2:38],2,sd)
mean = apply(top_sbs[2:38],2,mean)
median = apply(top_sbs[2:38],2,median)
sum_top_sbs = data.frame(mean = mean, median = median, sd = sd)
sum_top_sbs$cores = c(1:37)
sum_top_sbs = sum_top_sbs[which(!(sum_top_sbs$cores%in% c(11:19,21:29,31, 33:38))),]
p<-ggplot(sum_top_sbs, aes(x=cores, y=mean,colour="Mean SBS Runtime")) +
geom_point()+
geom_point(aes(y=median,colour="Median SBS Runtime"))+
geom_errorbar(aes(ymin=mean-sd,
ymax=mean+sd), width=.2,
position=position_dodge(0.05))+
scale_y_continuous(
name = "Runtime"
#sec.axis = sec_axis( trans=~./self$Cutoff , name="probability of solving instance RegRF prediction")
)
p
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
sum_top_sbs$mean
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
top_as = top_as[which(!(top_as$X.selected_solvers%in% c(11:19,21:29,31, 33:38))),]
df["Top Algorithm Selection (no uncertainty)"] = as.numeric(top_as$Parallel_time)
theta_results = read.arff("top_Uncertainty_Theta_0.1139342_limitingSolvers.arff")
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
top_as = top_as[which(!(top_as$X.selected_solvers%in% c(11:19,21:29,31, 33:38))),]
df["Top Algorithm Selection (no uncertainty)"] = as.numeric(top_as$Parallel_time)
top_as$Parallel_time
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
top_as
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
View(df)
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
View(top_as)
df = data.frame(matrix(nrow= 13, ncol=0))
df$Cores = c(1:10,20,30,32)
df["Single Best Solver"] = as.numeric(sum_top_sbs$mean)
df["Virtual Best Solver"] = as.numeric(sum_top_vbs$mean)
df = df[which(df$Cores %in% c(1:10)),]
top_as = read.arff("top_as_noUncertainty.arff")
top_as$Parallel_time = as.numeric(top_as$Parallel_time)
top_as$X.selected_solvers = as.numeric(top_as$X.selected_solvers)
top_as = top_as[which(!(top_as$X.selected_solvers%in% c(11:19,21:29,31, 33:38))),]
df["Top Algorithm Selection (no uncertainty)"] = as.numeric(top_as$Parallel_time)
df["Top Algorithm Selection (no uncertainty)"] = as.numeric(top_as$Parallel_time)[1:10]
theta_results = read.arff("top_Uncertainty_Theta_0.1139342_limitingSolvers.arff")
theta_results = read.arff("top_Uncertainty_Theta_0.1139_limitingSolvers.arff")
theta_results = theta_results[which(theta_results$metric == "Runtime"),]
theta_results = theta_results[which(theta_results$orderBy == "pred-se"),]
theta_results = theta_results[which(theta_results$median == FALSE),]
theta_results = theta_results[c(1:10,20,30,32),]
df["Algorithm Selection + Uncertainty"] = as.numeric(theta_results$Parallel_time)
df["Algorithm Selection + Uncertainty"] = as.numeric(theta_results$Parallel_time)[1:10]
sbs_p = df$`Single Best Solver`[1]
vbs_p = df$`Virtual Best Solver`[1]
as_p = df$`Top Algorithm Selection`[1]
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO.csv")
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO2.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO_old.csv"))
theta = rbind(theta,read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO3.csv"))
theta = read.csv("~/Documents/OrganizedScripts/results/SAT2016/RandomSearch_SAT2016_combined_allEqual_NOTignoreTO_300.csv")
theta = theta[which(theta$metric=="Runtime"),]
theta = theta[which(theta$median==FALSE),]
theta = theta[which(theta$orderBy=="pred-se"),]
theta = theta[which(theta$Parallel_time == min(theta$Parallel_time)),]
theta
app_p = c(theta$X.selected_solvers, theta$Parallel_time)
theta = read.arff("~/Documents/OrganizedScripts/results/SAT2016/top_Uncertainty_Theta_0.1139_limitingSolvers.arff")
